apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    //buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    defaultConfig {
        applicationId "com.city.trash"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    signingConfigs {
        //添加签名文件配置(将signingConfigs{}放到了buildType{}的后面,会导致编译的时候无法找到)
        debug {
            try {
                storeFile file("../123456.jks")
                storePassword STORE_PASSWORD
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
            } catch (ex) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
        release {
            try {
                storeFile file("../123456.jks")
                storePassword STORE_PASSWORD
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
            } catch (ex) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false  //是否开启混淆
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'//指定混淆文件的位置
        }

        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def date = new Date().format("yyyyMMdd" , TimeZone.getTimeZone("GMT+08"))
            if(variant.buildType.name.equals('debug')){
                ///"commonui_${date}_v${versionName}.apk"
                outputFileName = "TurnoverBox_${date}_v${versionName}.apk"
            }
            if(variant.buildType.name.equals('release')){
                outputFileName = "TurnoverBox_${date}_v${versionName}.apk"
            }
        }
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    implementation rootProject.ext.dependencies["appcompat-v7"]
    implementation rootProject.ext.dependencies["design"]
    implementation rootProject.ext.dependencies["support-v4"]
    implementation rootProject.ext.dependencies['butterknife']
    annotationProcessor rootProject.ext.dependencies['butterknife-compiler']
    implementation rootProject.ext.dependencies['retrofit']
    // 需要升级
    implementation rootProject.ext.dependencies['retrofit-adapter-rxjava']
    // 需要升级
    implementation rootProject.ext.dependencies['retrofit-converter-gson']
    implementation rootProject.ext.dependencies["okhttp"]
    // 需要升级
    implementation rootProject.ext.dependencies["okhttp-logging-interceptor"]
    implementation rootProject.ext.dependencies["rxjava"]
    implementation rootProject.ext.dependencies["rxandroid"]
    implementation rootProject.ext.dependencies["rxbinding"]
    // 需要升级
    implementation 'com.google.dagger:dagger:2.8'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.8'
    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    implementation 'com.github.bumptech.glide:okhttp3-integration:1.4.0@aar'
    implementation 'jp.wasabeef:glide-transformations:2.0.1'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation files('libs/qsprintersdk.jar')
    //文件下载框架
    implementation 'org.xutils:xutils:3.4.0'
}
